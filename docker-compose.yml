version: "3.2"

services:
  # For these services, we would build the image with our app code and
  # a version and latest tag, push it up to the Docker registry and pull it down
  # in the steps where we would actually use these services and reference it in the image property
  # (we would not have the build property anymore)
  # i.e. docker-compose pull build or docker-compose pull jest
  # and then docker-compose run build or docker-compose run jest
  build:
    # Replace username/repo:tag with your name and image details
    # image: username/repo:tag i.e. username/repo:${VERSION}
    build:
      # cache_from: username/repo:latest
      context: .
      dockerfile: Dockerfile
    volumes:
      # Allows other containers or CICD steps to access built assets in volumes
      # Outputs Webpack assets in Docker container's dist folder into your host ./ci/dist folder
      - ./ci/dist:/usr/src/app/dist
    environment:
      - API_URL
    command: npm run build
  jest:
    # Replace username/repo:tag with your name and image details
    # image: username/repo:tag i.e. username/repo:${VERSION}
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run test:ci
